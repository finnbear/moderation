package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"text/template"

	"github.com/gertd/go-pluralize"
	"github.com/schollz/progressbar/v3"
)

var (
	dictionaryFile       string
	commonDictionaryFile string
	profanityFile        string
	blacklistFile        string
	falsePositiveFile    string
	goFilename           string
	csvFile              string

	plural = pluralize.NewClient()
)

const goTemplateSrc = `package moderation

// Code generated by generator/filter_dictionary.go; DO NOT EDIT

type wordValue struct {
	word  string
	value uint32
}

var wordValues = {{.WordValues}}
`

func init() {
	if len(os.Args) != 8 {
		log.Fatalf("expected 8 args, got %d", len(os.Args))
	}
	dictionaryFile = os.Args[1]
	commonDictionaryFile = os.Args[2]
	profanityFile = os.Args[3]
	blacklistFile = os.Args[4]
	falsePositiveFile = os.Args[5]
	goFilename = os.Args[6]
	csvFile = os.Args[7]
}

func fileToStrings(filename string) (lines []string) {
	buf, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	str := string(buf)
	reader := strings.NewReader(str)
	scanner := bufio.NewScanner(reader)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return
}

type Values [4]int8

func (values Values) Add(other Values) Values {
	return Values{
		values[0] + other[0],
		values[1] + other[1],
		values[2] + other[2],
		values[3] + other[3],
	}
}

func (values Values) Sub(other Values) Values {
	return Values{
		values[0] - other[0],
		values[1] - other[1],
		values[2] - other[2],
		values[3] - other[3],
	}
}

func (values Values) IsZero() bool {
	for _, value := range values {
		if value != 0 {
			return false
		}
	}
	return true
}

func (values Values) AnyZero() bool {
	for _, value := range values {
		if value == 0 {
			return true
		}
	}
	return false
}

func (values Values) AnyPositive() bool {
	for _, value := range values {
		if value > 0 {
			return true
		}
	}
	return false
}

func (values Values) AnyNegative() bool {
	for _, value := range values {
		if value < 0 {
			return true
		}
	}
	return false
}

func (values Values) Pack() (packed uint32) {
	for i, value := range values {
		packed |= (uint32(value) & 255) << (i * 8)
	}
	return
}

// each line contains [key],[values]
func fileToStringValues(filename string) (valuesMap map[string]Values) {
	valuesMap = make(map[string]Values)

	buf, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	str := string(buf)
	reader := strings.NewReader(str)
	scanner := bufio.NewScanner(reader)

	// Discard first line (csv header)
	scanner.Scan()
	scanner.Text()

	for scanner.Scan() {
		line := scanner.Text()
		lineSegments := strings.Split(line, ",")
		key := lineSegments[0]
		var values Values
		for i := 0; i < 4; i++ {
			parsed, err := strconv.Atoi(lineSegments[i+1])
			if err != nil {
				log.Fatal(err)
			}
			values[i] = int8(parsed)
		}
		valuesMap[key] = values
	}
	return
}

func main() {
	dictionary := fileToStrings(dictionaryFile)
	commonDictionary := fileToStrings(commonDictionaryFile)
	profanities := fileToStringValues(profanityFile)
	blacklistRaw := fileToStrings(blacklistFile)
	falsePositives := fileToStrings(falsePositiveFile)

	for _, falsePositive := range falsePositives {
		dictionary = append(dictionary, falsePositive)
	}

	var blacklistRegexes []*regexp.Regexp
	for _, raw := range blacklistRaw {
		r := regexp.MustCompile(raw)
		blacklistRegexes = append(blacklistRegexes, r)
	}

	var combinationWords []string

	shortValid := map[string]bool{
		"all":  true,
		"also": true,
		"and":  true,
		"any":  true,
		"are":  true,
		"as":   true,
		"back": true,
		"be":   true,
		"but":  true,
		"by":   true,
		"can":  true,
		"come": true,
		"day":  true,
		"do":   true,
		"for":  true,
		"from": true,
		"have": true,
		"he":   true,
		"her":  true,
		"his":  true,
		"how":  true,
		"give": true,
		"go":   true,
		"good": true,
		"one":  true,
		"it":   true,
		"my":   true,
		"not":  true,
		"she":  true,
		"the":  true,
		"to":   true,
		"with": true,
		"you":  true,
	}

search:
	for _, word := range commonDictionary {
		if len(word) < 3 && !shortValid[word] {
			continue
		}

		wordSingular := plural.Singular(word)

		for profanity := range profanities {
			if word == profanity || wordSingular == profanity {
				continue search
			}
		}

		for _, r := range blacklistRegexes {
			if RegexMatchAll(r, word) {
				continue search
			}
		}

		combinationWords = append(combinationWords, word)
	}

	fmt.Printf("Dictionary has %d words\n", len(dictionary))
	fmt.Println()
	fmt.Println("Testing word combinations...")
	bar := progressbar.New(len(combinationWords))

	//endOfNormalDictionary := len(dictionary) - 1

	for _, word1 := range combinationWords {
		bar.Add(1)
		for _, word2 := range combinationWords {
			combined := word1 + word2
			for profanity := range profanities {
				// These profanities create too many false positives
				// (this check must be in sync with the moderation runtime)
				if len(profanity) <= 3 || (len(profanity) <= 4 && profanity[0] == 's') {
					continue
				}
				idx := strings.Index(combined, profanity)
				if idx != -1 && idx > len(word1)-len(profanity) && idx < len(word1) {
					dictionary = append(dictionary, combined)
					break
					//println(word1, word2)
				}
			}
		}
	}

	fmt.Println()
	fmt.Printf("Dictionary now has %d words\n", len(dictionary))
	fmt.Println()
	fmt.Println("Filtering dictionary...")
	filtered := make(map[string]Values)
	bar = progressbar.New(len(dictionary))

filtering:
	for _, word := range dictionary {
		bar.Add(1)

		wordSingular := plural.Singular(word)

		var falsePositiveValue Values

		for profanity, value := range profanities {
			if word == profanity || wordSingular == profanity {
				// is a profane word, so is not false positive
				continue filtering
			}
			idx := strings.Index(word, profanity)
			if idx != -1 {
				if (len(profanity) <= 3 || (len(profanity) <= 4 && profanity[0] == 's')) && idx != 0 { // reduce errors with short profanities
					continue
				}

				falsePositiveValue = falsePositiveValue.Sub(value)
			}
		}

		if falsePositiveValue.IsZero() {
			// does not contain any profane words, so is irrelevant
			continue filtering
		}

		for _, r := range blacklistRegexes {
			if RegexMatchAll(r, word) {
				// is a blacklisted word, so is not false positive
				continue filtering
			}
		}

		filtered[word] = falsePositiveValue
	}

	fmt.Println()
	fmt.Printf("Dictionary now has %d words\n", len(filtered))
	fmt.Println()
	fmt.Println("Removing redundancies...")

	// sort by length to find and remove redundancies in the right order
	sortedFilteredKeys := make([]string, 0, len(filtered))

	for word := range filtered {
		sortedFilteredKeys = append(sortedFilteredKeys, word)
	}

	sort.Slice(sortedFilteredKeys, func(i, j int) bool {
		lenDiff := len(sortedFilteredKeys[i]) - len(sortedFilteredKeys[j])
		if lenDiff != 0 {
			return lenDiff < 0
		}
		return sortedFilteredKeys[i] < sortedFilteredKeys[j]
	})

	bar = progressbar.New(len(filtered))

outer:
	for _, word1 := range sortedFilteredKeys {
		bar.Add(1)

		value1 := filtered[word1]

		// word1 is the long word that may be redundant
		// word2 is the short word that may make word1 redundant

		//var testing = make(map[string]int)

		for word2, value2 := range filtered {
			if len(word1) > len(word2) && strings.Index(word1, word2) != -1 {
				value1 = value1.Sub(value2)
				//testing[word2]=value2

				if !value1.AnyNegative() {
					if value1.AnyPositive() {
						// for debugging
						//fmt.Printf("\nwarning: false positive '%s' (originally %d) achieved positive value %d (%v)\n", word1, filtered[word1], value1, testing)
					}
					delete(filtered, word1)
					continue outer
				}
			}
		}

		for i, value := range value1 {
			if value > 0 {
				value1[i] = 0
			}
		}

		filtered[word1] = value1
	}

	bar.Finish()

	// add profanity
	for profanity, value := range profanities {
		filtered[profanity] = value
	}

	longest := 0

	for word := range filtered {
		if len(word) > longest {
			longest = len(word)
		}
	}

	fmt.Println()
	fmt.Printf("Dictionary now has %d words, the longest having %d letters\n", len(filtered), longest)
	fmt.Println()

	fmt.Println("Writing output file...")

	goFile, err := os.Create(goFilename)
	if err != nil {
		log.Fatal(err)
	}
	goTemplate, err := template.New("go").Parse(goTemplateSrc)
	if err != nil {
		panic(err)
	}
	valuesLiteral, csvOutput := fmtValues(filtered)
	err = goTemplate.Execute(goFile, map[string]interface{}{
		"WordValues": valuesLiteral,
	})
	if err != nil {
		log.Fatal(err)
	}
	err = goFile.Close()
	if err != nil {
		log.Fatal(err)
	}

	csvFile, err := os.Create(csvFile)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Fprint(csvFile, csvOutput)
	err = csvFile.Close()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Done.")
}

func fmtSlice(slice []string) string {
	var builder strings.Builder
	builder.WriteString("[]string{\n")
	for _, str := range slice {
		builder.WriteString(fmt.Sprintf("	\"%s\",\n", str))
	}
	builder.WriteString("}")
	return builder.String()
}

func fmtValues(m map[string]Values) (literal, csv string) {
	// store in slice for sorting keys
	slice := make([]string, 0, len(m))
	longest := 0

	for word := range m {
		slice = append(slice, word)
		if len(word) > longest {
			longest = len(word)
		}
	}

	// Radix will be more cache efficient if sorted by length
	sort.Slice(slice, func(i, j int) bool {
		if len(slice[i]) == len(slice[j]) {
			return slice[i] < slice[j]
		}
		return len(slice[i]) < len(slice[j])
	})

	var literalBuilder strings.Builder
	var csvBuilder strings.Builder

	literalBuilder.WriteString("[...]wordValue{\n")
	csvBuilder.WriteString("word,profane,offensive,sexual,mean\n")
	for _, word := range slice {
		values := m[word]
		literal := fmt.Sprintf("\t{\"%s\", 0x%x},\n", word, values.Pack())
		literalBuilder.WriteString(literal)
		wordPadding := paddingString(longest - len(word))
		csvBuilder.WriteString(fmt.Sprintf("%s%s,%3d,%3d,%3d,%3d\n", word, wordPadding, values[0], values[1], values[2], values[3]))
	}
	literalBuilder.WriteString("}")
	/*
		builder.WriteString("map[string]uint32{\n")
		for _, word := range slice {
			values := m[word]
			wordPadding := paddingString(longest - len(word))
			line := fmt.Sprintf("	\"%s\":%s 0x%08x, // %3d %3d %3d %3d\n", word, wordPadding, values.Pack(), values[0], values[1], values[2], values[3])
			builder.WriteString(line)
		}
		builder.WriteString("}")
	*/
	return literalBuilder.String(), csvBuilder.String()
}

func paddingString(amount int) (padding string) {
	for i := 0; i < amount; i++ {
		padding += " "
	}
	return
}

func RegexMatchAll(pattern *regexp.Regexp, str string) bool {
	pattern.Longest()
	return len(pattern.FindString(str)) == len(str)
}
