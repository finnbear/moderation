package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"sort"
	"strings"
	"text/template"

	"github.com/gertd/go-pluralize"
	"github.com/schollz/progressbar"
)

var (
	dictionaryFile         string
	commonDictionaryFile   string
	profanityFile          string
	blacklistFile          string
	falsePositiveFile      string
	filteredDictionaryFile string
	goFilename             string

	plural = pluralize.NewClient()
)

const goTemplateSrc = `package moderation

// Code generated by generator/filter_dictionary.go; DO NOT EDIT

var profanities = {{.Profanities}}

var falsePositives = {{.FalsePositives}}
`

func init() {
	if len(os.Args) != 8 {
		log.Fatalf("expected 8 args, got %d", len(os.Args))
	}
	dictionaryFile = os.Args[1]
	commonDictionaryFile = os.Args[2]
	profanityFile = os.Args[3]
	blacklistFile = os.Args[4]
	falsePositiveFile = os.Args[5]
	filteredDictionaryFile = os.Args[6]
	goFilename = os.Args[7]
}

func fileToStrings(filename string) (lines []string) {
	buf, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	str := string(buf)
	reader := strings.NewReader(str)
	scanner := bufio.NewScanner(reader)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return
}

func main() {
	dictionary := fileToStrings(dictionaryFile)
	commonDictionary := fileToStrings(commonDictionaryFile)
	profanities := fileToStrings(profanityFile)
	blacklistRaw := fileToStrings(blacklistFile)
	falsePositives := fileToStrings(falsePositiveFile)

	for _, falsePositive := range falsePositives {
		dictionary = append(dictionary, falsePositive)
	}

	var blacklistRegexes []*regexp.Regexp
	for _, raw := range blacklistRaw {
		r := regexp.MustCompile(raw)
		blacklistRegexes = append(blacklistRegexes, r)
	}

	filtered := make(map[string]int)

	var combinationWords []string

	shortValid := map[string]bool{
		"all":  true,
		"also": true,
		"and":  true,
		"any":  true,
		"are":  true,
		"as":   true,
		"back": true,
		"be":   true,
		"but":  true,
		"by":   true,
		"can":  true,
		"come": true,
		"day":  true,
		"do":   true,
		"for":  true,
		"from": true,
		"have": true,
		"he":   true,
		"her":  true,
		"his":  true,
		"how":  true,
		"give": true,
		"go":   true,
		"good": true,
		"one":  true,
		"it":   true,
		"my":   true,
		"not":  true,
		"she":  true,
		"the":  true,
		"to":   true,
		"with": true,
		"you":  true,
	}

search:
	for _, word := range commonDictionary {
		if len(word) < 3 && !shortValid[word] {
			continue
		}

		wordSingular := plural.Singular(word)

		for _, profanity := range profanities {
			if word == profanity || wordSingular == profanity {
				continue search
			}
		}

		for _, r := range blacklistRegexes {
			if RegexMatchAll(r, word) {
				continue search
			}
		}

		combinationWords = append(combinationWords, word)
	}

	fmt.Printf("Dictionary has %d words\n", len(dictionary))
	fmt.Println()
	fmt.Println("Testing word combinations...")
	bar := progressbar.New(len(combinationWords))

	//endOfNormalDictionary := len(dictionary) - 1

	for _, word1 := range combinationWords {
		bar.Add(1)
		for _, word2 := range combinationWords {
			combined := word1 + word2
			for _, profanity := range profanities {
				// These profanities create too many false positives
				// (this check must be in sync with the moderation runtime)
				if len(profanity) <= 3 || (len(profanity) <= 4 && profanity[0] == 's') {
					continue
				}
				idx := strings.Index(combined, profanity)
				if idx != -1 && idx > len(word1)-len(profanity) && idx < len(word1) {
					dictionary = append(dictionary, combined)
					//println(word1, word2)
				}
			}
		}
	}

	fmt.Println()
	fmt.Printf("Dictionary now has %d words\n", len(dictionary))
	fmt.Println()
	fmt.Println("Filtering dictionary...")
	bar = progressbar.New(len(dictionary))

filtering:
	for _, word := range dictionary {
		bar.Add(1)

		wordSingular := plural.Singular(word)

		count := 0

		for _, profanity := range profanities {
			//profanitySegments := strings.Split(profanityLine, ",")
			//profanity := profanitySegments[0]
			//_, _ = strconv.Atoi(profanitySegments[1])
			if word == profanity || wordSingular == profanity {
				continue filtering
			}
			if strings.Index(word, profanity) != -1 {
				count++
				break
			}
		}

		if count == 0 {
			continue filtering
		}

		for _, r := range blacklistRegexes {
			if RegexMatchAll(r, word) {
				continue filtering
			}
		}

		filtered[word] = count
	}

	fmt.Println()
	fmt.Printf("Dictionary now has %d words\n", len(filtered))
	fmt.Println()
	fmt.Println("Removing redundancies...")
	bar = progressbar.New(len(filtered))

	for word1, count1 := range filtered {
		bar.Add(1)
		bar.SetMax(len(filtered))
		for word2, count2 := range filtered {
			if count1 == count2 && len(word2) > len(word1) && strings.Index(word2, word1) != -1 {
				delete(filtered, word2)
			}
		}
	}

	var list []string
	longest := 0

	for word, count := range filtered {
		if count > 1 {
			// If this happens, may need to store how many profanities are
			// in each false positive
			println("warning: " + word + " contains multiple profanities")
		}
		if len(word) > longest {
			longest = len(word)
		}
		list = append(list, word)
	}
	fmt.Println()
	fmt.Printf("Dictionary now has %d words, the longest having %d letters\n", len(filtered), longest)
	fmt.Println()
	fmt.Println("Sorting...")

	sort.Strings(list)

	/*
	   clean := fileToStrings("clean.txt")
	   for _, c := range clean {
	       found := false
	       for word := range filtered {
	           if word == c {
	               found = true
	               break
	           }
	       }
	       if !found {
	           println("missed", c)
	       }
	   }
	*/

	fmt.Println("Writing output files...")

	var buffer bytes.Buffer

	for _, word := range list {
		buffer.WriteString(word)
		buffer.WriteByte('\n')
	}

	err := ioutil.WriteFile(filteredDictionaryFile, buffer.Bytes(), 0644)
	if err != nil {
		log.Fatal(err)
	}

	goFile, err := os.Create(goFilename)
	if err != nil {
		log.Fatal(err)
	}
	goTemplate, err := template.New("go").Parse(goTemplateSrc)
	if err != nil {
		panic(err)
	}
	err = goTemplate.Execute(goFile, map[string]interface{}{
		"Profanities":    fmtSlice(profanities),
		"FalsePositives": fmtSlice(list),
	})
	if err != nil {
		log.Fatal(err)
	}
	err = goFile.Close()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Done.")
}

func fmtSlice(slice []string) string {
	var builder strings.Builder
	builder.WriteString("[]string{\n")
	for _, str := range slice {
		builder.WriteString(fmt.Sprintf("	\"%s\",\n", str))
	}
	builder.WriteString("}")
	return builder.String()
}

func RegexMatchAll(pattern *regexp.Regexp, str string) bool {
	pattern.Longest()
	return len(pattern.FindString(str)) == len(str)
}
